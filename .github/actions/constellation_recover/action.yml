name: Constellation recover
description: "Recover a Constellation cluster with an unavailable control plane."

inputs:
  kubeconfig:
    description: "The kubeconfig for the cluster."
    required: true
  masterSecret:
    description: "The master-secret for the cluster."
    required: true
  cloudProvider:
    description: "Which cloud provider to use."
    required: true
  gcpProject:
    description: "The GCP project to deploy Constellation in."
    required: false

runs:
  using: "composite"
  steps:
    # Get Constellation UID
    - name: Get Constellation cluster UID
      shell: bash
      run: |
        CONSTELLATION_UID=$(yq -r ".uid" constellation-id.json)
        echo "CONSTELLATION_UID=$CONSTELLATION_UID" >> $GITHUB_ENV
      env:
        KUBECONFIG: ${{ inputs.kubeconfig }}
    # Restart worker node machine and wait for it to rejoin the cluster
    - name: Restart worker node on GCP
      if: ${{ inputs.cloudProvider == 'gcp' }}
      shell: bash
      run: |
        export GCP_ZONE=$(yq -r ".provider.gcp.zone" constellation-conf.yaml)
        export WORKER_NODE_INSTANCE=$(gcloud compute instances list --project=${{ inputs.gcpProject }} --zones=${GCP_ZONE} --filter="labels.constellation-role=worker AND labels.constellation-uid=${CONSTELLATION_UID}" --format="json" | jq '.[0].name' -r)
        gcloud compute instances reset ${WORKER_NODE_INSTANCE} --project=${{ inputs.gcpProject }} --zone=${GCP_ZONE}
        kubectl wait --for=condition=ready --all nodes --timeout=10m
      env:
        KUBECONFIG: ${{ inputs.kubeconfig }}
    # Restart control plane machine
    - name: Restart control plane on GCP
      if: ${{ inputs.cloudProvider == 'gcp' }}
      shell: bash
      run: |
        export GCP_ZONE=$(yq -r ".provider.gcp.zone" constellation-conf.yaml)
        export CONTROL_PLANE_INSTANCES=$(gcloud compute instances list --project=${{ inputs.gcpProject }} --zones=${GCP_ZONE} --filter="labels.constellation-role=control-plane AND labels.constellation-uid=${CONSTELLATION_UID}" --format="json" | jq '.[].name' -r)
        for instance in ${CONTROL_PLANE_INSTANCES}
        do
        gcloud compute instances reset ${instance} --project=${{ inputs.gcpProject }} --zone=${GCP_ZONE}
        done
        sleep 60
      env:
        KUBECONFIG: ${{ inputs.kubeconfig }}
    # Recover the control plane
    - name: Constellation recover
      if: ${{ inputs.cloudProvider == 'gcp' }} # TODO: remove
      run: constellation recover --master-secret ${{ inputs.master-secret }}
      shell: bash
      env:
        KUBECONFIG: ${{ inputs.kubeconfig }}
